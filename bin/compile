#!/usr/bin/env bash

BUILD_DIR=$1
ENV_DIR=$3

shopt -s nullglob  # if files don't exist, expand globs to zero arguments instead to themselves

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

if [ ! -e "$ENV_DIR/OVERLAY" ]; then
  echo "'OVERLAY' environment variable not set, aborting..."
  exit 1
fi

OVERLAY=$(<$ENV_DIR/OVERLAY)

if [ ! -f $1/.buildpacks ] && [ ! -f $1/.buildpacks.$OVERLAY ]; then
  echo "no .buildpacks neither .buildpacks.overlay-string file"
  exit 1
fi

echo "-----> Overlaying '*.$OVERLAY' over repository root"

cd $BUILD_DIR

for from in *.$OVERLAY .*.$OVERLAY bin/*.$OVERLAY; do
  to=${from/%.$OVERLAY/}
  echo "copying '$from' to '$to'" | indent
  cp $from $to
done

shopt -u nullglob  # going back to the default behavior, for easiness of detecting simple errors.
set -e

unset GIT_DIR

for BUILDPACK in $(cat $BUILD_DIR/.buildpacks); do
  dir=$(mktemp -t buildpackXXXXX)
  rm -rf $dir

  url=${BUILDPACK%#*}
  branch=${BUILDPACK#*#}

  if [ "$branch" == "$url" ]; then
    branch=""
  fi

  if [ "$url" != "" ]; then
    echo "=====> Downloading Buildpack: $url"
    git clone $url $dir >/dev/null 2>&1
    cd $dir

    if [ "$branch" != "" ]; then
      git checkout $branch >/dev/null 2>&1
    fi

    chmod +x $dir/bin/{detect,compile,release}

    set +e
    framework=$($dir/bin/detect $1)
    exit_code=$?
    set -e

    if [ $exit_code == 0 ]; then
      echo "=====> Detected Framework: $framework"
      $dir/bin/compile $1 $2 $3

      if [ $? != 0 ]; then
        exit 1
      fi

      $dir/bin/release $1 > $1/last_pack_release.out
    fi
  fi
done

echo "Using release configuration from last framework $framework:" | indent
cat $BUILD_DIR/last_pack_release.out | indent
